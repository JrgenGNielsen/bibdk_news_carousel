<?php
/*
 * verbose
 */
function verbose($verbose_level, $str) {
  global $VERBOSE, $TRACEFILE;
  if ($verbose_level & $VERBOSE) {
    switch ($verbose_level) {
      case WARNING : $vtext = "WARNING"; break;
      case ERROR :   $vtext = "ERROR"; break;
      case FATAL :   $vtext = "FATAL"; break;
      case STAT :    $vtext = "STAT"; break;
      case TIMER :   $vtext = "TIMER"; break;
      case DEBUG :   $vtext = "DEBUG"; break;
      case TRACE :   $vtext = "TRACE"; break;
      case Z3950 :   $vtext = "Z3950"; break;
      case OCI :   $vtext = "OCI"; break;
      default :      $vtext = "UNKNOWN"; break;
    }
    if (isset($TRACEFILE)) {
      if ($fp = @ fopen($TRACEFILE,"a")) {
        if(!ereg("\n\$", $str)) $str .= "\n";
        fwrite($fp, $vtext . " " . date("H:i:s-d/m/y") . ": " . $str);
        fclose($fp);
      } else 
        die("FATAL: Cannot open " . $TRACEFILE);
    } else
      echo $vtext . " " . $str . "<br/>";
  }
}

function is_email($mail_addy, $dns_lookup=FALSE) {
  $ret = eregi("^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$", $mail_addy);
  if ($ret && $dns_lookup) {
    $email_parts = explode("@", $mail_addy);
    $ret = (getmxrr($email_parts[1], $trash));
  }
  return $ret;
}

function set_mail_headers($is_html_mail=FALSE) {
global $MAIL_FROM, $MAIL_REPLY_TO;
  $headers = "";
  if ($is_html_mail) {
    $headers  .= 'MIME-Version: 1.0' . "\n";
    $headers .= 'Content-type: text/html; charset=iso-8859-1' . "\n";
  }
  if (getext("mail_from")) $headers .= 'From: ' . getext("mail_from") . "\n";
  elseif ($MAIL_FROM) $headers .= 'From: ' . $MAIL_FROM . "\n";
  if (getext("reply_to")) $headers .= 'Reply-To: ' . getext("reply_to") . "\n";
  elseif ($MAIL_REPLY_TO) $headers .= 'Reply-To: ' . $MAIL_REPLY_TO . "\n";
  $headers .= 'X-Mailer: PHP';
  return $headers;
}

function fold_3($s) {
  for ($i = 0; $i < strlen($s); $i++)
    $ret .= chr( (ord($s[$i]) & 0xC0) +
                ((ord($s[$i]) & 0x38) >> 3) +
                ((ord($s[$i]) & 0x07) << 3));
  return($ret);
}

function set_from_list(&$from, &$to, $list) {
  if ($from) {
    $a_list = explode(" ", $list);
    foreach ($a_list as $val)
      if (isset($from[$val])) $to[$val] = (is_scalar($from[$val]) ? stripslashes($from[$val]) : $from[$val]);
  }
}

function ZapChars(&$buf) {
  if (!empty($buf)) $buf = eregi_replace("[^a-z0-9_]", "", $buf);
}

function sanitize_string($str, $op="") {
  switch ($op) {
    default: return(ereg_replace("[" . chr(0x01) . "-" . chr(0x1F) . "]", "", $str));
  }
}
function getext() {
global $lang_texts;
  if (func_num_args()) $key = strtolower(func_get_arg(0)); else $key = "";
  if (isset($lang_texts[$key])) {
    $txt = $lang_texts[$key];
    //$txt = unbackslash_text($txt);
    for ($i = func_num_args() - 1; $i > 0; $i--) {
      $arg_i = func_get_arg($i);
      $txt = str_replace('$'.$i, $arg_i, $txt);
    }
    return(str_replace("\\n", "\n", $txt));
  }
  return("");
}

function parse2tab($text) {
  $tab = array();
//if ($text["template"] == "array_to_niveauer") print_r($text);
  foreach ($text["content"] as $t)
    if (isset($t["content"]))
      $tab[ $t["key"][0] ] = parse2tab($t);
    else
      $tab[ $t["key"][0] ] = $t["value"][0];
//if ($text["template"][0] == "array_to_niveauer") print_r($tab);
  return($tab);
}
function load_lang_tab($langfile, $lingo="") {
  if ($f = load_lang_file($langfile, $lingo))
    return(parse2tab($f));
  else
    return(array());
}
function make_lang_name($langfile, $lingo="") {
global $LINGO_PATH, $TEXT_PATH;
  if (empty($lingo)) $lingo = $LINGO_PATH; else $lingo .= "/";
  return($TEXT_PATH . $lingo . $langfile . ".xml");
}
function is_lang_file($langfile, $lingo="") {
  return(is_file(make_lang_name($langfile, $lingo)));
}
function load_lang_file($langfile, $lingo="") {
global $LINGO_PATH, $IMAGE_PATH, $TEXT_REPLACES;
  if ($fp = @ fopen(make_lang_name($langfile, $lingo), "r")) {
    $val = "";
    while (! feof($fp)) $val .= fgets($fp, 99999);
    fclose($fp);
    if (is_array($TEXT_REPLACES))
      foreach ($TEXT_REPLACES as $repl)
        $val = eregi_replace($repl["from"], $repl["to"], $val);
    $val = str_replace("_IMAGE_LINGO_PATH_", $IMAGE_PATH . $LINGO_PATH, $val);
    $val = str_replace("_IMAGE_PATH_", $IMAGE_PATH, $val);
    //$val = str_replace("\r\n", "", $val);
    return(xml2array($val, TRUE, TRUE));
  } else {
    //verbose(ERROR, "load_lang_file(): Cannot find/open " . $langfile);
    return FALSE;
  }
}

/* 
 * put_lang_text
 */
function put_lang_text($key, $val) {
global $lang_texts;
  $lang_texts[strtolower($key)] = $val;
}

/*
 * load_lang_text
 *
 * if key is set, the whole file is put into lang_texts
 * if key is unset, each line is split into key and text
 */
function load_lang_text($langfile, $key="", $lingo="") {
global $lang_texts;
  if ($xa = load_lang_file($langfile, $lingo)) {
    if (isset($xa["value"]))
      $lang_texts[strtolower($key)] = $xa["value"][0];
    else
      traverse_content($xa, $lang_texts);
    return TRUE;
  } else {
    return FALSE;
  }
}

function traverse_content($struct, &$res) {
  foreach ($struct["content"] as $level)
    if (isset($level["value"]))
      $res[strtolower($level["key"][0])] = $level["value"][0];
    else
      traverse_content($level, $res[strtolower($level["key"][0])]);
}

function expand_target($targets) {
static $tgt;
  if (empty($tgt)) $tgt = array_flip(load_lang_tab("targets"));
  $ret = "";
  foreach($targets as $t)
    $ret .= (empty($ret) ? $tgt[$t] : ", " .  $tgt[$t]);

  return($ret);
}

function selected($var, $val) {
global $selected;
  if ($var != $val) return "value=\"$val\"";
  $selected = $val;
  return "selected value=\"$val\"";
}
function array_match($a, $m) {
  if (gettype($a) != "array") return ($a == $m);
  else 
    foreach ($a as $e)
      if ($e == $m) return TRUE;
  return FALSE;
}

function escape_bookit_id($s) {
  $ids = explode(" ", trim($s));
  foreach ($ids as $key => $id)
    $ids[$key] = "%22" . substr($id, 0, 1) . "%20" . substr($id, 1, 3) . "%20" . substr($id, 4, 3) . "%20" . substr($id, 7, 1) . "%20%22";
  return(implode("/id+eller+", $ids));
}
function merge_idnr($buf, $id, $id_list="", $add_url="") {
  if ($buf) {
    if (!strpos($buf, "_IDNR_")) $buf .= "_IDNR_";
    if (empty($id_list)) 
      $lok_id = $id;
    else {
// Axiell
      if (strpos($buf, 'scode_ccl%3Did%3D'))
        $lok_id = str_replace(" ", "%2b", trim($id_list));
      elseif (strpos($buf, 'keyno_list'))
        $lok_id = str_replace(" ", "%2c", trim($id_list));
// Integra
      elseif (strpos($buf, 'linkme.php'))
        $lok_id = "%28" . str_replace(" ", " eller ", trim($id_list)) . "%29";
// Sirsi
      elseif (strpos($buf, 'uhtbin'))
        $lok_id = str_replace(" ", ",", trim($id_list));
// Book-it
      elseif (strpos($buf, 'in_ccl_query='))
        $lok_id = str_replace(" ", ",", escape_bookit_id($id_list));
// Aleph
      elseif (strpos(strtolower($buf), 'ccl_term=wrd'))
        $lok_id = str_replace(" ", "%20eller%20wrd%3D", trim($id_list));
      elseif (strpos(strtolower($buf), 'ccl_term=fsb'))
        $lok_id = str_replace(" ", "%20eller%20fsb%3D", trim($id_list));
      elseif (strpos(strtolower($buf), 'ccl_term=sys'))
        $lok_id = str_replace(" ", "%20eller%20sys%3D", trim($id_list));
      else
        $lok_id = $id;
    }
    return(FORW_POP_PRE . urlencode(str_replace("_IDNR_", $lok_id, $buf)).$add_url . FORW_POP_POST);
  }
}

?>
